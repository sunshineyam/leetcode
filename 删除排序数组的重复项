题目描述
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        
       /* size_t count=0;
        for(size_t i=0;i<nums.size();i++)
        {
            if(nums[i]==nums[i+1])
            {
                nums[i]=nums[i+1];
                count++;
            }
        }
        return nums.size()-count;*/
        //用快慢指针解决此问题，慢指针slow，快指针fast,当slow的值等于fast的值时，fast走，当不相等时，slow++，                  nums[slow]=nums[fast]
        if(nums.size()==0)
            return 0;
        size_t slow=0;
        for(size_t fast=1;fast<nums.size();fast++)
        {
            if(nums[slow]!=nums[fast])
            {
                slow++;
                nums[slow]=nums[fast];
            }
        }
        return slow+1;
    }
};