背包问题
有 n 个物品和一个大小为 m 的背包. 给定数组 A 表示每个物品的大小和数组 V 表示每个物品的价值.
问最多能装入背包的总价值是多大?
class Solution {
public:
int backPackII(int m, vector<int> A, vector<int> V) {
	if (A.empty() || V.empty() || m < 1) 
	{
		return 0;
	}
	//多加一行一列，用于设置初始条件
	const int N = A.size() + 1;
	const int M = m + 1;
	vector<vector<int> > result;
	result.resize(N);
	//初始化所有位置为0，第一行和第一列都为0，初始条件
	for (int i = 0; i != N; ++i) 
	{
		result[i].resize(M, 0);
	}
	for (int i = 1; i < N; ++i) 
	{
		for (int j = 1; j != M; ++j) 
		{
			//第i个商品在A中对应的索引为i-1: i从1开始
			//如果第i个商品大于j,说明放不下， 所以(i,j)的最大价值和(i-1,j)相同
			if(A[i - 1] > j) 
			{
				result[i][j] = result[i - 1][j];
			}
			//如果可以装下，分两种情况，装或者不装
			//如果不装，则即为(i-1, j)
			//如果装，需要腾出放第i个物品大小的空间： j - A[i-1],装入之后的最大价值即为(i - 1,j - A[i-1]) + 第i个商品的价值V[i - 1]
			//最后在装与不装中选出最大的价值
			else 
			{
				int newValue = result[i - 1][j - A[i - 1]] + V[i - 1];
				result[i][j] = max(newValue, result[i - 1][j]);
			}
		}
	}
	//返回装入前N个商品，物品大小为m的最大价值
	return result[N - 1][m];
	}
};
