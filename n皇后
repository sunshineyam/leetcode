题目描述：
n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。
每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。
class Solution {
public:
    bool IsPut(vector<pair<int, int>>& curMethod, int curRow, int col)
    {
        //1.不在同一列
        //2.不在一条对角线上（行+列的和/差不相等）
        for(int i = 0; i < curMethod.size(); i++)
        {
            if(curMethod[i].second == col 
               || curMethod[i].first + curMethod[i].second == curRow + col
              || curMethod[i].first - curMethod[i].second == curRow - col)
                return false;
        }
        return true;
    }
    void DFS(vector<vector<pair<int, int>>>& allMethod, vector<pair<int, int>>& curMethod, int curRow, int n)
    {
        //行和列相等时，一种方法结束，把这种方法放入所有方法中
        if(curRow == n)
        {
            allMethod.push_back(curMethod);
        }
        for(int i = 0; i < n; i++)
        {
            //判断当前坐标是否符合
            if(IsPut(curMethod, curRow, i))
            {
                curMethod.push_back(make_pair(curRow, i));
                //递归遍历下一行的每一列
                DFS(allMethod, curMethod, curRow+1, n);
                //回溯
                //当前坐标放完时，一种方法结束，删除当前位置，尝试其他的位置
                curMethod.pop_back();
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        //存所有放皇后的方法
        vector<vector<pair<int, int>>> allMethod;
        //存放皇后的坐标
        vector<pair<int, int>> curMethod;
        DFS(allMethod, curMethod, 0, n);
        vector<vector<string>> finalRet;
        for(auto& curMt : allMethod)
        {
            vector<string> m(n, string(n, '.'));
            for(auto& pos : curMt)
            {
                //pos.first是m中的字符串，pos.second是字符串的每一个下标
                m[pos.first][pos.second] = 'Q';
            }
            finalRet.push_back(m);
        }
        return finalRet;
    }
};