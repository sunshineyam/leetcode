图像渲染：
有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。
给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。
为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。
最后返回经过上色渲染后的图像。
class Solution {
public:
    void DFS(vector<vector<int>>& image, int row, int col, int x, int y, int newColor, int originalColor)
    {
        //存储上下左右四个位置的变化,设置成静态的只需要初始化一次
        static int pos[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
        //1.染色
        image[x][y] = newColor;
        //2.搜索，x,y点的上下左右
        for(int i = 0; i < 4; i++)
        {
            int nx = x + pos[i][0];
            int ny = y + pos[i][1];
            //判断是否越界
            if(nx >= row || ny < 0 || ny >= col || nx < 0)
                continue;
            if(image[nx][ny] == originalColor)
            {
                DFS(image, row, col, nx, ny, newColor, originalColor);
            }
        }
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int row = image.size();
        int col = image[0].size();
        int originalColor = image[sr][sc];
        if(newColor == originalColor)
            return image;
        DFS(image, row, col, sr, sc, newColor, originalColor);
        return image; 
    }
};